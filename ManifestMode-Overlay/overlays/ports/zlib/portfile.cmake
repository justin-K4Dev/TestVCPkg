# -------------------------------------------------------------------------------------------------
# zlib overlay portfile.cmake
# -------------------------------------------------------------------------------------------------

# 사용할 tag/commit
# set(ZLIB_REF "v1.3.1")
# 특정 커밋 고정 시:
set(ZLIB_REF "51b7f2abdade71cd9bb0e7a373ef2610ec6f9daf")

# 1) git에서 소스 가져오기 (URL 을 사용해야 함)
vcpkg_from_git(
    OUT_SOURCE_PATH SOURCE_PATH
    URL https://github.com/madler/zlib.git
    REF ${ZLIB_REF}
)

# 2) 표준 CMake configure/build/install
vcpkg_cmake_configure(
    SOURCE_PATH "${SOURCE_PATH}"
    OPTIONS
        -DCMAKE_RC_COMPILER=rc
        -DCMAKE_MT=mt
)
vcpkg_cmake_build()
vcpkg_cmake_install()

# -------------------------------------------------------------------------------------------------
# post-install 정리
# -------------------------------------------------------------------------------------------------

# upstream cmake config 잔여물 제거(혼선 방지)
file(REMOVE_RECURSE
    "${CURRENT_PACKAGES_DIR}/lib/cmake"
    "${CURRENT_PACKAGES_DIR}/debug/lib/cmake")

# static 빌드에서 동적 산출물/빈 디렉토리 제거
if(VCPKG_LIBRARY_LINKAGE STREQUAL "static")
    file(REMOVE_RECURSE
        "${CURRENT_PACKAGES_DIR}/bin"
        "${CURRENT_PACKAGES_DIR}/debug/bin")
endif()

# 2) pkgconfig 이동 + 고정
# upstream은 share/pkgconfig/zlib.pc에 놓는 경우가 있어 pkgconf 탐색 규칙에 맞게 이동
if(EXISTS "${CURRENT_PACKAGES_DIR}/share/pkgconfig/zlib.pc")
    file(MAKE_DIRECTORY "${CURRENT_PACKAGES_DIR}/lib/pkgconfig")
    file(RENAME
        "${CURRENT_PACKAGES_DIR}/share/pkgconfig/zlib.pc"
        "${CURRENT_PACKAGES_DIR}/lib/pkgconfig/zlib.pc")
endif()
if(EXISTS "${CURRENT_PACKAGES_DIR}/debug/share/pkgconfig/zlib.pc")
    file(MAKE_DIRECTORY "${CURRENT_PACKAGES_DIR}/debug/lib/pkgconfig")
    file(RENAME
        "${CURRENT_PACKAGES_DIR}/debug/share/pkgconfig/zlib.pc"
        "${CURRENT_PACKAGES_DIR}/debug/lib/pkgconfig/zlib.pc")
endif()

# 남은 share/pkgconfig 잔여 정리
file(REMOVE_RECURSE
    "${CURRENT_PACKAGES_DIR}/debug/include"
    "${CURRENT_PACKAGES_DIR}/debug/share"
    "${CURRENT_PACKAGES_DIR}/debug/share/zlib")

# .pc 내부 prefix/경로 정규화
vcpkg_fixup_pkgconfig()

# 3) debug/include, debug/share 정리(헤더 중복 제거)
file(REMOVE_RECURSE
    "${CURRENT_PACKAGES_DIR}/debug/include"
    "${CURRENT_PACKAGES_DIR}/debug/share")

vcpkg_test_cmake(PACKAGE_NAME ZLIB CONFIG TARGETS ZLIB::ZLIB)

# 4) PDB 복사(있으면)
vcpkg_copy_pdbs()

# -------------------------------------------------------------------------------------------------
# CONFIG 모드용 얇은 ZLIBConfig.cmake 생성
#  - zlib.lib | zlibstatic.lib (Release)
#  - zlibd.lib | zlibstaticd.lib (Debug)
# -------------------------------------------------------------------------------------------------
file(MAKE_DIRECTORY "${CURRENT_PACKAGES_DIR}/share/zlib")

file(WRITE "${CURRENT_PACKAGES_DIR}/share/zlib/ZLIBConfig.cmake" [=[
# Minimal ZLIBConfig.cmake generated by overlay (zlib.lib / zlibd.lib aware)
include_guard(GLOBAL)

# <pkg>/share/zlib/ZLIBConfig.cmake -> <pkg>
get_filename_component(PACKAGE_PREFIX_DIR "${CMAKE_CURRENT_LIST_DIR}/../.." ABSOLUTE)

set(_inc_dir "${PACKAGE_PREFIX_DIR}/include")

set(_lib_rel_candidates
    "${PACKAGE_PREFIX_DIR}/lib/zlib.lib"
    "${PACKAGE_PREFIX_DIR}/lib/zlibstatic.lib"
)
set(_lib_dbg_candidates
    "${PACKAGE_PREFIX_DIR}/debug/lib/zlibd.lib"
    "${PACKAGE_PREFIX_DIR}/debug/lib/zlibstaticd.lib"
)

set(_lib_rel "")
foreach(_cand IN LISTS _lib_rel_candidates)
    if(EXISTS "${_cand}")
        set(_lib_rel "${_cand}")
        break()
    endif()
endforeach()

set(_lib_dbg "")
foreach(_cand IN LISTS _lib_dbg_candidates)
    if(EXISTS "${_cand}")
        set(_lib_dbg "${_cand}")
        break()
    endif()
endforeach()

if(NOT _lib_rel AND NOT _lib_dbg)
    message(FATAL_ERROR
      "Neither zlib.lib nor zlibd.lib was found under ${PACKAGE_PREFIX_DIR}.")
endif()

if(NOT TARGET ZLIB::ZLIB)
    add_library(ZLIB::ZLIB STATIC IMPORTED)

    if(_lib_rel AND _lib_dbg)
        set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_CONFIGURATIONS "RELEASE;DEBUG")
        set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_LOCATION_RELEASE "${_lib_rel}")
        set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_LOCATION_DEBUG   "${_lib_dbg}")
    elseif(_lib_rel)
        # 단일 구성(Release만) 혹은 멀티 구성의 기본값 대응
        set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_LOCATION "${_lib_rel}")
    else()
        # Debug만 있는 특수 상황 대응
        set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_CONFIGURATIONS "DEBUG")
        set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_LOCATION_DEBUG "${_lib_dbg}")
        set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_LOCATION        "${_lib_dbg}")
    endif()

    target_include_directories(ZLIB::ZLIB INTERFACE "${_inc_dir}")
endif()
]=])

# 사용법 안내
file(WRITE "${CURRENT_PACKAGES_DIR}/share/zlib/usage" [=[
Use config mode:

    find_package(ZLIB CONFIG REQUIRED)
    target_link_libraries(your_app PRIVATE ZLIB::ZLIB)
]=])

# -------------------------------------------------------------------------------------------------
# 라이선스 설치
# -------------------------------------------------------------------------------------------------
file(GLOB _copyright
     LIST_DIRECTORIES false
     "${SOURCE_PATH}/README"
     "${SOURCE_PATH}/README.md")

if(NOT _copyright)
    message(WARNING "No README/README.md found in ${SOURCE_PATH} for copyright install.")
else()
    vcpkg_install_copyright(FILE_LIST ${_copyright})
endif()